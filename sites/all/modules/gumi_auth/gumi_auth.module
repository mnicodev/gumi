<?php

global $url;
$url["register"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/register";
$url["authenticate"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/authenticate";
$url["load"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/load";


function gumi_auth_init() {
	global $_SESSION,$_COOKIE;
	//print_r($_COOKIE);
	if(isset($_SESSION["token_gumi"]) && !isset($_COOKIE["token_gumi"])) {
		setrawcookie("token_gumi",rawurlencode($_SESSION["token_gumi"]),time()+(60*60*36));
		unset($_SESSION["token_gumi"]);
	}
	//print_r($_SESSION);
}

/**
 * Implement hook_help() to display a small help message
 * if somebody clicks the "Help" link on the modules list.
 */
function gumi_auth_help( $path, $arg )
{
    switch ( $path )
    {
        case 'admin/help#gumi_auth':
        {
            return( '<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>' );
        }
    }
}

/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'gumi_auth_login_validate'.
 */
function gumi_auth_form_user_login_alter( &$form, $form_state )
{
	 
    $form["name"]["#title"]="";
    $form["name"]["#attributes"]["placeholder"]=t("Email address");
    $form["name"]["#description"]="";
    $form["pass"]["#title"]="";
    $form["pass"]["#attributes"]["placeholder"]=t("Password");
    $form["pass"]["#description"]="";
    $form["remember_me"]["#title"]=t("Keep me logger in");
    $form["captcha"]["#attributes"]["placeholder"]=t("Captcha");
    //print_r($form);exit;
	unset($form['links']);
	$form['#validate'] = array( 'user_login_name_validate','gumi_auth_login_validate',  'user_login_final_validate' );
	
}

function gumi_auth_form_alter(&$form, $form_state ){
	//print_r($form);exit;
}
function gumi_auth_form_user_register_form_alter( &$form, $form_state ){
	$form["account"]["name"]["#title"]="";
	$form["account"]["name"]["#attributes"]["placeholder"]=t("Username");
	$form["account"]["mail"]["#title"]="";
	$form["account"]["mail"]["#attributes"]["placeholder"]=t("Email address");
	$form["account"]["pass"]["#process"]= array('form_process_password_confirm', 'register_alter_password_confirm');
	$form["actions"]["submit"]["#value"]=t("Create account");
	$form["field_conditions"]["en"]["#default_value"]=array();
	/*$form["account"]["pass"]["#description"]="";
	$form["account"]["pass"]["#attributes"]["placeholder"]=t("Password");*/
	
	//print_r($form);exit;
}

function register_alter_password_confirm($element) {
	$element['pass1']['#title_display'] = "invisible";
    $element['pass1']['#attributes']['placeholder'] = t("Password");
    $element['pass2']['#title_display'] = "invisible";
    $element['pass2']['#attributes']['placeholder'] = t("Confirm password");
    return $element;
}

function gumi_auth_form_user_login_block_alter( &$form, $form_state )
{
    return gumi_auth_form_user_login_alter( $form, $form_state );
}


function gumi_auth_form_user_profile_form_alter( &$form, $form_state )
{
    if ( strpos( $form['#user']->name, '@' ) !== false )
    {
        $form['account']['name']['#disabled'] = TRUE;
        $form['account']['name']['#description'] = t('The username for this account cannot be changed');
        $form['account']['mail']['#disabled'] = TRUE;
        $form['account']['mail']['#description'] = t('This e-mail address for this account cannot be changed.');
        $form['account']['current_pass']['#disabled'] = TRUE;
        $form['account']['current_pass']['#description'] = t('Neither the email address or password for this account can be changed.');
        $form['account']['pass']['#disabled'] = TRUE;
        $form['account']['pass']['#description'] = t('The password for this account cannot be changed.');
    }
}


function gumi_auth_login_validate( $form, &$form_state )
{
    global $user,$_COOKIE,$_SESSION;

    $username = $form_state['values']['name'];
	// on vÃ©rifie si l'utilisateur existe 
	
    $test=user_load_by_name($username);
    $user_test=null;
    if(is_object($test) && $test->uid)
		$user_test=user_load($test->uid);
    $admin=0;
    
    if(is_object($user_test) && (in_array("administrator",$user_test->roles) || in_array("developer",$user_test->roles))) {
		
		$uid=user_authenticate($form_state['values']['name'], $form_state['values']['pass']);
		//echo $uid;
		$form_state['uid'] = $uid;
    	$admin=1;
    } elseif ( strpos( $username, '@' ) !== false) {
		//if($user_test->uid) drupal_goto("/");
		
    	$rs=validate_external_user( $form_state['values']['name'], $form_state['values']['pass']);
    	
		
		if (isset($rs->token))  {
			
        	
            user_external_login_register( $username, 'gumi_auth' );
            
            $_SESSION["token_gumi"]=$rs->token;
            


            $form_state['uid'] = $user->uid;
           /* $user->field_deviceid["und"][0]["value"]=$rs->deviceId;
			$user->field_deviceid["und"][0]["safe_value"]=$rs->deviceId;
			$user->field_secretkey["und"][0]["value"]=$rs->secretKey;
			$user->field_secretkey["und"][0]["safe_value"]=$rs->secretKey;
			variable_set("deviceId_".$user->uid,$rs->deviceId);
			user_save($user);*/
			

        }  elseif(isset($rs->error) && $rs->error) {
			switch($rs->error) {
				case "GAUTH_ACCOUNT_LOCKED":
					form_set_error('name', t('Your account is locked for 24 hours'));
					
					break;
				case "GAUTH_AUTHENTICATION_FAILED": 
					form_set_error('name', t('your account has not been authenticated'));
					
					break;
				default:
			}		
			
			
		} else {//drop through to the end and return nothing - Drupal will handle the rejection
			
		}
		
    }  else  {
        // Username is not an e-mail address, so use standard Drupal authentication function
        user_login_authenticate_validate( $form, $form_state );
    }
}


define( 'EXTERNAL_AUTH_RID', 4 );

function gumi_auth_user_insert( &$edit, &$account, $category = null )
{
	
	//echo "create";exit;

    if ( strpos( $account->name, '@' ) !== false )
    {
       
        if ( empty( $account->mail ))
        {
            db_update( 'users' )->fields( array( 'mail' => $account->name ))
                                ->condition( 'uid', $account->uid, '=' )
                                ->execute();
        }


        $account->roles[EXTERNAL_AUTH_RID] = 'external user';
    }
}

function gumi_auth_user_update(&$edit, $account, $category) {
	global $_SESSION,$_COOKIE;
	//setrawcookie("token_gumi",$_SESSION["token_gumi"],time()+(24*36));
	//echo $_COOKIE["token_gumi"];
	
	if(isset($account->field_player_name["und"]) && $account->field_player_name["und"][0]["value"]) {
		$c=curl_init();
		$data=array(
			"newName"=>$account->field_player_name["und"][0]["value"],
		);
		
		
		$json=json_encode($data);
		
		curl_setopt($c,CURLOPT_URL,"http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/updateName");
		curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($c, CURLOPT_POST, 1);
		curl_setopt($c, CURLOPT_CUSTOMREQUEST, "POST");
		curl_setopt($c,CURLOPT_HTTPHEADER, array(
			"Accept: application/json",
			"Content-Type: application/json",
			"Authorization: Bearer ".(isset($_COOKIE["token_gumi"])?$_COOKIE["token_gumi"]:$_SESSION["token_gumi"])
		));
		curl_setopt($c, CURLOPT_POSTFIELDS, $json);
		$rs = json_decode(curl_exec($c));
		
		switch($rs->error) {
			case "PLAYER_NAME_IS_TAKEN":
				form_set_error('name', t('This name is already used by another player.'));
				break;
			case "INVALID_TOKEN":
				form_set_error('name', t('Token invalid.'));
				break;
			default:
				form_set_error('name', t('an error occurred while saving to the gumi server'));
		} 
	}
	
	
}


function load_external_user($token) {
	
}


function validate_external_user( $email, $password )
{
	
	global $user;
	global $url;
	$c=curl_init();
	$data=array(
		/*"deviceId"=>"1bebb084-d68d-425a-828b-d46291d120ad",
		"secretKey"=>$uuid,*/
		"emailAddress"=>$email,
		"passwordHash"=>hash("sha256",$password),
	);
	
	$json=json_encode($data);
	
	curl_setopt($c,CURLOPT_URL,$url["authenticate"]);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($c, CURLOPT_POST, 1);
	curl_setopt($c, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($c,CURLOPT_HTTPHEADER, array(
		"Accept: application/json",
		"Content-Type: application/json",
	));
	curl_setopt($c, CURLOPT_POSTFIELDS, $json);
	$rs = json_decode(curl_exec($c));
	
	
	
	/*if(isset($rs->token)) {
		
	} else if($rs->error)*/
	return $rs;
    //return false;
}



function generate_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),
        mt_rand( 0, 0xffff ),
        mt_rand( 0, 0x0fff ) | 0x4000,
        mt_rand( 0, 0x3fff ) | 0x8000,
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}
