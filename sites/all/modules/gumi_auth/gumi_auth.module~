<?php

global $url;
$url["register"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/register";
$url["authenticate"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/authenticate";
$url["load"]="http://ec2-34-251-110-19.eu-west-1.compute.amazonaws.com/website/load";


/**
 * Implement hook_help() to display a small help message
 * if somebody clicks the "Help" link on the modules list.
 */
function gumi_auth_help( $path, $arg )
{
    switch ( $path )
    {
        case 'admin/help#gumi_auth':
        {
            return( '<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>' );
        }
    }
}

/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'gumi_auth_login_validate'.
 */
function gumi_auth_form_user_login_alter( &$form, $form_state )
{
    unset($form['links']);
    $form['#validate'] = array( 'user_login_name_validate', 'gumi_auth_login_validate', 'user_login_final_validate' );
}

function gumi_auth_form_user_login_block_alter( &$form, $form_state )
{
    return gumi_auth_form_user_login_alter( $form, $form_state );
}


function gumi_auth_form_user_profile_form_alter( &$form, $form_state )
{
    if ( strpos( $form['#user']->name, '@' ) !== false )
    {
        $form['account']['name']['#disabled'] = TRUE;
        $form['account']['name']['#description'] = t('The username for this account cannot be changed');
        $form['account']['mail']['#disabled'] = TRUE;
        $form['account']['mail']['#description'] = t('This e-mail address for this account cannot be changed.');
        $form['account']['current_pass']['#disabled'] = TRUE;
        $form['account']['current_pass']['#description'] = t('Neither the email address or password for this account can be changed.');
        $form['account']['pass']['#disabled'] = TRUE;
        $form['account']['pass']['#description'] = t('The password for this account cannot be changed.');
    }
}


function gumi_auth_login_validate( $form, &$form_state )
{
    global $user,$_COOKIE;

    $username = $form_state['values']['name'];

    // In our case we're assuming that any username with an '@' sign is an e-mail address,
    // hence we're going to check the credentials against our external system.
    if ( strpos( $username, '@' ) !== false )
    {
    	// on vérifie si l'utilisateur existe 
    	$user_drupal=user_load_by_mail($form_state['values']['name']);
    	
    	if(is_object($user_drupal) && $user_drupal->uid) {
    		// récupération du deviceId
    		$deviceId=variable_get("deviceId_".$user_drupal->uid);
    	} else {
    		$deviceId=registerExternalUser($form_state['values']['name'], $form_state['values']['pass']);
    	}
    	
        // Looks like we found them - now we need to check if the password is correct
        if ($token=validateExternalUser( $form_state['values']['name'], $form_state['values']['pass'],$deviceId ))
        {
        	
            user_external_login_register( $username, 'gumi_auth' );
            
            $_COOKIE["token_gumi"]=$token;
            // I wish we didn't have to do this, but I couldn't find any other way to get the
            // uid at this point
            $form_state['uid'] = $user->uid;
           /* db_insert("field_data_field_deviceid")->fields(array(
					"entity_type"=>"user",
					"bundle"=>"user",
					"deleted"=>0,
					"entity_id"=>$user->uid,
					"revision_id"=>$user->uid,
					"language"=>"und",
					"delta"=>0,
					"field_deviceid_value"=>$deviceId,
					"field_deviceid_format"=>"NULL"
				))->execute();*/
				variable_set("deviceId_".$user->uid,$deviceId);
            //print_r(variable_get("deviceId_".$user->uid));exit;
        } // else drop through to the end and return nothing - Drupal will handle the rejection
    }
    else
    {
        // Username is not an e-mail address, so use standard Drupal authentication function
        user_login_authenticate_validate( $form, $form_state );
    }
}


define( 'EXTERNAL_AUTH_RID', 2 );

function gumi_auth_user_insert( &$edit, &$account, $category = null )
{

    if ( strpos( $account->name, '@' ) !== false )
    {
       
        if ( empty( $account->mail ))
        {
            db_update( 'users' )->fields( array( 'mail' => $account->name ))
                                ->condition( 'uid', $account->uid, '=' )
                                ->execute();
        }


        $account->roles[EXTERNAL_AUTH_RID] = 'external user';
    }
}


function validateExternalUser( $email, $password )
{
	global $user;
	$rs=_gumi_authenticate($email,$password,$deviceId);

	if(isset($rs->token)) {
		return $rs->token;
		/*$rs= _gumi_register($email,$password);
		
		if($rs->deviceId) {
			
			return $rs->deviceId; 
		} else return false;*/
	}
	
    return false;
}

function registerExternalUser( $email, $password ) {
	$rs=_gumi_register($email,$password);
	
	if(isset($rs->deviceId)) return $rs->deviceId;
	return false;
		
}

function _gumi_register($email,$pass) {
	global $url;
	$c=curl_init();
	$data=array(
		
		"secretKey"=>"d511b9fa-f7a1-11e7-8c3f-9a214cf093ae",
		"emailAddress"=>$email,
		"passwordHash"=>hash("sha256",$pass),
	);
	$output="";
	
	
	curl_setopt($c,CURLOPT_URL,$url["register"]);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($c, CURLOPT_POST, 1);
	curl_setopt($c, CURLOPT_CUSTOMREQUEST, "POST");
	
	curl_setopt($c,CURLOPT_HTTPHEADER, array(
		"Accept: application/json",
		"Content-Type: application/json",
		
	));
	curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($data));
	
	$output = json_decode(curl_exec($c));
	
	return $output;
}

function _gumi_authenticate($email,$pass) {
	global $url;
	$c=curl_init();
	$data=array(
		"deviceId"=>"1bebb084-d68d-425a-828b-d46291d120ad",
		"secretKey"=>"d511b9fa-f7a1-11e7-8c3f-9a214cf093ae",
		"emailAddress"=>$email,
		"passwordHash"=>hash("sha256",$pass),
	);
	$json=json_encode($data);
	
	curl_setopt($c,CURLOPT_URL,$url["authenticate"]);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($c, CURLOPT_POST, 1);
	curl_setopt($c, CURLOPT_CUSTOMREQUEST, "POST");
	//curl_setopt($c, CURLOPT_HEADER, true);
	curl_setopt($c,CURLOPT_HTTPHEADER, array(
		"Accept: application/json",
		"Content-Type: application/json",
		/*"Authorization: Bearer 9cd6453a-6bd9-41eb-b893-d0c6ddb6c5b2",*/
	));
	curl_setopt($c, CURLOPT_POSTFIELDS, $json);
	$output = json_decode(curl_exec($c));
	return $output;
}